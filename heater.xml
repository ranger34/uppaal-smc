<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>// Place global declarations here.
// strategy number
int sn = 1;
// user mode: 0 - uniform, 1 - normal
const int u_mode = 1;

// room number
const int N = 5;
// initial temperature of sunny and rainy days
const double T_s = 283.5;    // 3 - 15
const double T_r = 280.5;    // 5 - 9
// define of Ï€
const double PI = 3.1415926;
// Type of room id
typedef int [0, N-1] rid_t;
// rooms notified to stop heating
typedef int [0, N-2] stopid_t;
// 0 and N+1 are the ambient, 1-N are N rooms 
typedef int [-1, N] tid_t; 

// global clock
clock time;
// temperature, T[-1] = T[N] = ambient temperature, T[0]-T[N-1] are temperature of N rooms
clock T[tid_t];
// clock for a day, here a day last 10 hours, from 8am to 6pm and the work time is from 9am to 5pm
clock t_day;
// outside temperature
//clock T_outside;
// energy
clock energy;
// in range or out of range
clock range_out[rid_t];

// heat need flag of room
bool need[rid_t] = {false,false,false,false,false};
// rooms notified to cool 
int notify[stopid_t];

// temperature define
double temp_lower[rid_t] = {288.0, 286.0, 290.0, 289.0, 287.0 };
double temp_upper[rid_t] = {300.0, 298.0, 302.0, 301.0, 299.0 };
double temp_need[rid_t] =  {294.0, 293.0, 296.0, 295.0, 294.0 };

// weather : 0 - sunny, 1 - cloudy
int weather;

// power define
double current_power=0.0;
//int power[rid_t]={0, 0, 0, 0, 0};
int power[rid_t][2] =
{
    {630, 830},
    {610, 810},
    {650, 850},
    {640, 840},
    {620, 820}
/*
    {430, 630},
    {410, 610},
    {450, 650},
    {440, 640},
    {420, 620}
*/
};
// variation of power of different room
double power_variation[rid_t];

double power_variation_arg[rid_t][2] = 
{
    {0.13, 1.0},
    {0.11, 1.0},
    {0.15, 1.0},
    {0.14, 1.0},
    {0.12, 1.0}
};


// capacitance of rooms
double c[rid_t] = {42.0, 44.0, 47.0, 46.0, 45.0};
// resistance of walls between rooms and the ambient 
double r[tid_t][tid_t] =
/*
{
    {0.0, 0.022,0.0, 0.0, 0.0, 0.0, 0.0},
    {0.022,0.0, 0.016,0.0, 0.0, 0.0, 0.0},
    {0.0, 0.016,0.0, 0.018,0.0, 0.0, 0.0},
    {0.0, 0.0, 0.018,0.0, 0.019,0.0, 0.0},
    {0.0, 0.0, 0.0, 0.019,0.0, 0.017,0.0},
    {0.0, 0.0, 0.0, 0.0, 0.017,0.0,0.025},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.025,0.0}
};
*/
{
    {0.0, 0.033,0.0, 0.0, 0.0, 0.0, 0.0},
    {0.033,0.0, 0.024,0.0, 0.0, 0.0, 0.0},
    {0.0, 0.024,0.0, 0.027,0.0, 0.0, 0.0},
    {0.0, 0.0, 0.027,0.0, 0.029,0.0, 0.0},
    {0.0, 0.0, 0.0, 0.029,0.0, 0.026,0.0},
    {0.0, 0.0, 0.0, 0.0, 0.026,0.0,0.034},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.034,0.0}
};


// time defination
const int day = 36000;
const int half_day = 18000;

// length of queue
int len = 0;
// room queue
int queue[N];


/*************** Defination of channels ***************/
// Channel for user
broadcast chan arrive[rid_t], leave[rid_t];
// Channel for heater
broadcast chan heater_on, heater_off;
// Channel for urgent edge
urgent broadcast chan heat_need, cool_need, in, out;
// Channel for room's request
broadcast chan heat_stop[rid_t], heat_permit[rid_t];
// Channel for notification of user's arriving and leaving
broadcast chan u_arrive[rid_t], u_leave[rid_t];


/*************** Functions ***************/
bool queue_empty()
{
    return (len == 0) ? true : false;
}

void enqueue(rid_t element)
{
    queue[len] = element;
    len++;
}

void queue_leave(rid_t element)
{
    int i=0;
    while(i &lt; len-1)
    {
        if(queue[i] == element)
        {
            while(i&lt; len-1)
            {
                queue[i] = queue[i + 1];
                i++;
            }   
        }
        else i++;
    }
    queue[i] = -1;
    len--;
}

// generation of normal distribution
double normal_random()
{
    double u = random(1);
    double v = random(1);
    double x = sqrt((-2) * ln(u)) * cos(2 * PI * v);

    return x;
}</declaration>
	<template>
		<name x="9" y="9">Controller</name>
		<declaration>// equal to zero
clock z;

clock delay;

// chosen room number
int ch;
// f is used to record the index
int f = -1;
// room id that user in it is arriving or leaving
int arr_id;
int lea_id;


// put the chosen room to the tail of the queue
void q_fcfs_reorder()
{
    int i, tmp;
    tmp = queue[f];
    for(i = f; i &lt; len-1; i++)
    {
        queue[i] = queue[i + 1];
    }
    queue[i] = tmp;
}

// reorder according to temperature
void q_temp_reorder()
{
    int i, j, m, n, tmp;
    for(i = 0; i &lt; len; i++)
    {
        tmp = queue[i];
        for(j = i; j &lt; len; j++)
        {
            if((T[ queue[j] ] - T[tmp]) &lt;= z)
            {
                tmp = queue[j];
                m = j;
            }
        }
        n = queue[i];
        queue[i] = tmp;
        queue[m] = n;
    }
}

void q_temp_reorder_mod()
{
    if(T[queue[0]] &gt;= temp_need[queue[0]])
        q_temp_reorder();
    //else do nothing    
}

// check and find the first room that need heating
int check_need()
{
    int i, x = -1, tmp;
    for(i = 0; i &lt; len &amp;&amp; x == -1; i++)
    {
        tmp = queue[i];
        if(need[tmp] == true)
        {
            x = tmp;
            f = i;    // f record the index
        }
    }
    return x;
}

// procude the room that need to notify to stop heating
void set_stop(int x)
{
    int i, j;
    int tmp[N];
    if(x != -1)
    {
        for(i = 0; i &lt; N; i++)
            tmp[i] = i;
        
        for(i = 0; i &lt; N-1; i++)
            if(tmp[i] == x)
            {
                for(j = i; j &lt; N-1; j++)
                    tmp[j] = tmp[j+1];
            }
        for(i : int[0,N-2])
            notify[i] = tmp[i];
    }
}

int choose(int s)
{
    int i, x = -1, tmp;

    if(s == 1)
    {
        x = check_need();
        if(x != -1) q_fcfs_reorder();
    }
    else
        if(s == 2)
        {
            q_temp_reorder();
            x = check_need();
        }
        else
            if(s == 3)
            {
                q_temp_reorder_mod();
                x = check_need();
            }

    set_stop(x);

    return x;
}

void power_set(int p)
{
    if(p == 1)
    {
        current_power = power[ch][weather] * power_variation[ch];
        //current_power = power[ch][weather];
    }
    else
        current_power = 0;
}</declaration>
		<location id="id0" x="-943" y="-705">
			<urgent/>
		</location>
		<location id="id1" x="-1258" y="-850">
			<urgent/>
		</location>
		<location id="id2" x="-875" y="-850">
			<urgent/>
		</location>
		<location id="id3" x="-1258" y="-637">
			<urgent/>
		</location>
		<location id="id4" x="-901" y="-637">
			<urgent/>
		</location>
		<location id="id5" x="-654" y="-850">
			<name x="-645" y="-875">Sending</name>
			<urgent/>
		</location>
		<location id="id6" x="-1105" y="-850">
			<name x="-1088" y="-875">Receiving</name>
			<label kind="invariant" x="-1096" y="-841">z' == 0</label>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1071" y="-731">heater_off!</label>
			<label kind="assignment" x="-1071" y="-705">power_set(0)</label>
			<nail x="-1105" y="-705"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="select" x="-875" y="-748">i : rid_t</label>
			<label kind="guard" x="-875" y="-731">ch == -1</label>
			<label kind="synchronisation" x="-875" y="-705">heat_stop[i]!</label>
			<nail x="-671" y="-705"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-824" y="-816">queue_empty()</label>
			<label kind="synchronisation" x="-824" y="-799">u_leave[lea_id]!</label>
			<label kind="assignment" x="-824" y="-773">ch = -1</label>
			<nail x="-875" y="-773"/>
			<nail x="-713" y="-773"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1232" y="-969">u_arrive[arr_id]!</label>
			<label kind="assignment" x="-1232" y="-952">enqueue(arr_id)</label>
			<nail x="-1258" y="-926"/>
			<nail x="-1105" y="-926"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="select" x="-1215" y="-892">i : rid_t</label>
			<label kind="synchronisation" x="-1215" y="-875">arrive[i]?</label>
			<label kind="assignment" x="-1215" y="-850">arr_id = i</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-824" y="-892">!queue_empty()</label>
			<label kind="synchronisation" x="-824" y="-875">u_leave[lea_id]!</label>
			<label kind="assignment" x="-824" y="-850">ch = choose(sn)</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="select" x="-1003" y="-892">i : rid_t</label>
			<label kind="synchronisation" x="-1003" y="-875">leave[i]?</label>
			<label kind="assignment" x="-1003" y="-850">lea_id = i,
queue_leave(i)</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1250" y="-731">heater_on!</label>
			<label kind="assignment" x="-1250" y="-714">power_set(1)</label>
			<nail x="-1258" y="-756"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="select" x="-1139" y="-663">i : stopid_t</label>
			<label kind="synchronisation" x="-1139" y="-637">heat_stop[ notify[i] ]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-816" y="-663">ch != -1</label>
			<label kind="synchronisation" x="-816" y="-637">heat_permit[ch]!</label>
			<nail x="-654" y="-637"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-943" y="-952">cool_need?</label>
			<label kind="assignment" x="-943" y="-926">ch = choose(sn)</label>
			<nail x="-1062" y="-926"/>
			<nail x="-713" y="-926"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-943" y="-1012">heat_need?</label>
			<label kind="assignment" x="-943" y="-986">ch = choose(sn)</label>
			<nail x="-1080" y="-986"/>
			<nail x="-654" y="-986"/>
		</transition>
	</template>
	<template>
		<name>Weather</name>
		<declaration>double A_r = 0.00014;
double A_s = 0.00042;
double B = 0.00007;
double C = 0.262;</declaration>
		<location id="id7" x="-357" y="-493">
			<name x="-374" y="-527">Rainy</name>
			<label kind="invariant" x="-467" y="-476">T[-1]' == A_r * cos(B * t_day + C) &amp;&amp;
T[N]' == A_r * cos(B * t_day + C)</label>
		</location>
		<location id="id8" x="-357" y="-391">
			<name x="-374" y="-425">Sunny</name>
			<label kind="invariant" x="-468" y="-374">T[-1]' == A_s * cos(B * t_day + C) &amp;&amp;
T[N]' == A_s * cos(B * t_day + C)</label>
		</location>
		<location id="id9" x="-586" y="-442">
			<name x="-596" y="-476">Init</name>
			<urgent/>
		</location>
		<branchpoint id="id10" x="-535" y="-442">
		</branchpoint>
		<init ref="id9"/>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="assignment" x="-493" y="-535">T[-1] = T_r, 
T[N] = T_r</label>
			<label kind="probability" x="-518" y="-493">3</label>
			<nail x="-535" y="-493"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="assignment" x="-493" y="-433">T[-1] = T_s, 
T[N] = T_s</label>
			<label kind="probability" x="-518" y="-391">7</label>
			<nail x="-535" y="-391"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
		</transition>
	</template>
	<template>
		<name>Room</name>
		<parameter>const rid_t rid</parameter>
		<declaration>clock t;

clock T_cool, T_heat;
</declaration>
		<location id="id11" x="-926" y="-561">
			<name x="-968" y="-586">End</name>
			<label kind="invariant" x="-969" y="-544">T[rid]' == T_cool</label>
		</location>
		<location id="id12" x="-1181" y="-714">
			<name x="-1198" y="-748">Start</name>
			<label kind="invariant" x="-1232" y="-697">T[rid]' == T_cool</label>
		</location>
		<location id="id13" x="-926" y="-714">
			<name x="-994" y="-748">Cooling</name>
			<label kind="invariant" x="-1113" y="-697">T[rid]' == -1/c[rid] * ((T[rid]-T[rid-1])/r[rid][rid-1] + (T[rid]-T[rid-1])/r[rid][rid-1])</label>
		</location>
		<location id="id14" x="-671" y="-637">
			<name x="-722" y="-671">Heating</name>
			<label kind="invariant" x="-892" y="-620">T[rid]' == 1/c[rid] * (power[rid][weather] - ((T[rid]-T[rid-1])/r[rid][rid-1] + (T[rid]-T[rid-1])/r[rid][rid-1]))</label>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1036" y="-646">u_leave[rid]?</label>
			<label kind="assignment" x="-1036" y="-629">need[rid] = false</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-816" y="-586">u_leave[rid]?</label>
			<label kind="assignment" x="-816" y="-561">need[rid] = false</label>
			<nail x="-671" y="-561"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-1130" y="-782">u_arrive[rid]?</label>
			<label kind="assignment" x="-1130" y="-756">need[rid] = true,
t = 0, T[rid] = T[-1]</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-586" y="-714">T[rid] &gt; temp_upper[rid]
&amp;&amp; t &gt;= 2</label>
			<label kind="synchronisation" x="-586" y="-680">cool_need!</label>
			<label kind="assignment" x="-587" y="-663">need[rid] = false, t = 0</label>
			<nail x="-595" y="-637"/>
			<nail x="-595" y="-714"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-816" y="-739">heat_stop[rid]?</label>
			<label kind="assignment" x="-816" y="-714">t = 0</label>
			<nail x="-671" y="-714"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-866" y="-663">heat_permit[rid]?</label>
			<label kind="assignment" x="-866" y="-637">t = 0</label>
			<nail x="-892" y="-637"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="guard" x="-917" y="-807">T[rid] &lt;= temp_upper[rid] &amp;&amp; t &gt;=2</label>
			<label kind="synchronisation" x="-917" y="-790">heat_need!</label>
			<label kind="assignment" x="-917" y="-773">need[rid] = true, t = 0</label>
			<nail x="-977" y="-807"/>
			<nail x="-926" y="-807"/>
		</transition>
	</template>
	<template>
		<name>TempMonitor</name>
		<parameter>const rid_t rid</parameter>
		<location id="id15" x="-246" y="-59">
			<name x="-263" y="-93">Start</name>
			<label kind="invariant" x="-305" y="-42">range_out[rid]' == 0</label>
		</location>
		<location id="id16" x="255" y="25">
			<name x="272" y="17">End</name>
			<label kind="invariant" x="263" y="42">range_out[rid]' == 0</label>
		</location>
		<location id="id17" x="153" y="110">
			<name x="161" y="76">Out</name>
			<label kind="invariant" x="102" y="127">range_out[rid]' == 1</label>
		</location>
		<location id="id18" x="153" y="-59">
			<name x="144" y="-93">In</name>
			<label kind="invariant" x="102" y="-42">range_out[rid]' == 0</label>
		</location>
		<location id="id19" x="-93" y="-59">
			<name x="-110" y="-93">Wait</name>
			<label kind="invariant" x="-153" y="-42">range_out[rid]' == 0</label>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id15"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-212" y="-85">u_arrive[rid]?</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="263" y="-59">u_leave[rid]?</label>
			<nail x="255" y="-59"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="263" y="93">u_leave[rid]?</label>
			<nail x="255" y="110"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-229" y="25">T[rid] &gt;= temp_lower[rid] &amp;&amp;
T[rid] &lt;= temp_upper[rid]</label>
			<label kind="synchronisation" x="-161" y="68">in!</label>
			<nail x="-51" y="110"/>
			<nail x="-51" y="8"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-8" y="8">T[rid] &lt; temp_lower[rid] ||
T[rid] &gt; temp_upper[rid]</label>
			<label kind="synchronisation" x="42" y="51">out!</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-51" y="-85">T[rid] &gt;= temp_lower[rid]</label>
			<label kind="synchronisation" x="8" y="-59">in!</label>
		</transition>
	</template>
	<template>
		<name>Heater</name>
		<location id="id20" x="-212" y="-178">
			<name x="-221" y="-212">Off</name>
			<label kind="invariant" x="-297" y="-161">energy' == 0</label>
		</location>
		<location id="id21" x="-59" y="-178">
			<name x="-68" y="-212">On</name>
			<label kind="invariant" x="-110" y="-161">energy' == current_power</label>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-170" y="-127">heater_off?</label>
			<nail x="-59" y="-127"/>
			<nail x="-212" y="-127"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-170" y="-204">heater_on?</label>
		</transition>
	</template>
	<template>
		<name>User</name>
		<parameter>const rid_t rid</parameter>
		<declaration>// define of arrive time and leave time
// arrive and leave time
double arrive_t[rid_t];
double leave_t[rid_t];

void time_normal()
{
    int i;
    double temp;
    t_day = 0;
    for(i = 0; i &lt; N; i++)
    {
        do{
            temp = 3600 * normal_random();
            arrive_t[i] = 3600 - temp;
            leave_t[i] = 32400 + temp;
        }while(temp&lt;0 || temp&gt;3600);
    }
}

void time_uniform()
{
    int i;
    t_day = 0;
    for(i = 0; i &lt; N; i++)
    {
        arrive_t[i] = random(3600);
        leave_t[i] = 32400 + random(3600);
    }
}

void u_init(int n)    // 0 - uniform, 1 - normal
{
    if(n == 0)
        time_uniform();
    else
        time_normal();

    power_variation[rid] = power_variation_arg[rid][0] * normal_random() + power_variation_arg[rid][1];
    if (power_variation[rid] &lt; 0)
        power_variation[rid] = 1.0;
}</declaration>
		<location id="id22" x="-782" y="-272">
			<name x="-799" y="-306">Start</name>
			<urgent/>
		</location>
		<location id="id23" x="-212" y="-272">
			<name x="-237" y="-306">Leave</name>
		</location>
		<location id="id24" x="-425" y="-272">
			<name x="-442" y="-306">Arrive</name>
			<label kind="invariant" x="-485" y="-255">t_day &lt;= leave_t[rid]</label>
		</location>
		<location id="id25" x="-629" y="-272">
			<name x="-645" y="-306">Wait</name>
			<label kind="invariant" x="-697" y="-255">t_day &lt;= arrive_t[rid]</label>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id22"/>
			<target ref="id25"/>
			<label kind="assignment" x="-756" y="-297">u_init(u_mode)</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-595" y="-297">t_day &gt;= arrive_t[rid]</label>
			<label kind="synchronisation" x="-561" y="-272">arrive[rid]!</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-382" y="-297">t_day &gt;= leave_t[rid]</label>
			<label kind="synchronisation" x="-348" y="-272">leave[rid]!</label>
		</transition>
	</template>
	<system>// List one or more processes to be composed into a system.
//system Controller, Weather, Room, TempMonitor, Heater, User;
system Controller, Weather, Room, TempMonitor, Heater, User;
</system>
</nta>
